C51 COMPILER V9.60.0.0   INTERRUPT_ET_MAIN                                                 06/03/2021 10:56:05 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INTERRUPT_ET_MAIN
OBJECT MODULE PLACED IN .\src\Interrupt_ET_main.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe D:\year4-semeste
                    -r2\Silicon_lab_year3\Interrupt_ET\src\Interrupt_ET_main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOAT
                    -FUZZY(3) OPTIMIZE(0,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:\year4-semester2\Silicon_lab_year3\Inte
                    -rrupt_ET\inc;C:/SiliconLabs/SimplicityStudio/v5/developer/sdks/8051/v4.2.0//Device/shared/si8051Base;C:/SiliconLabs/Simp
                    -licityStudio/v5/developer/sdks/8051/v4.2.0//Device/EFM8LB1/inc) PRINT(.\src\Interrupt_ET_main.lst) COND PAGEWIDTH(120) P
                    -AGELENGTH(65) OBJECT(.\src\Interrupt_ET_main.OBJ)

line level    source

   1          //=========================================================
   2          // src/Interrupt_ET_main.c: generated by Hardware Configurator
   3          //
   4          // This file will be updated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          //-----------------------------------------------------------------------------
  10          // Includes
  11          //-----------------------------------------------------------------------------
  12          #include <SI_EFM8LB1_Register_Enums.h>                  // SFR declarations
  13          #include "InitDevice.h"
  14          #include "serial.h"
  15          #include "STDIO.H"
  16          // $[Generated Includes]
  17          // [Generated Includes]$
  18          uint32_t volatile msTick=0;
  19          //-----------------------------------------------------------------------------
  20          // SiLabs_Startup() Routine
  21          // ----------------------------------------------------------------------------
  22          // This function is called immediately after reset, before the initialization
  23          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  24          // useful place to disable the watchdog timer, which is enable by default
  25          // and may trigger before main() in some instances.
  26          //-----------------------------------------------------------------------------
  27          void
  28          SiLabs_Startup (void)
  29          {
  30   1        // $[SiLabs Startup]
  31   1        // [SiLabs Startup]$
  32   1        WDTCN=0XDE;
  33   1        WDTCN=0XAD;
  34   1      
  35   1      }
  36          
  37          //-----------------------------------------------------------------------------
  38          // main() Routine
  39          // ----------------------------------------------------------------------------
  40          void crossbar_enable(){
  41   1        CLKSEL= CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__HFOSC0;
  42   1        XBR2 |=XBR2_XBARE__ENABLED;
  43   1        XBR0 |=XBR0_URT0E__ENABLED;
  44   1        P0SKIP=0XCF; //  0B1100 1111
  45   1        P1SKIP=0X07;      //0B0000 0111
  46   1        XBR1 |=XBR1_PCA0ME__CEX0;
  47   1        P1MDOUT |=P1MDOUT_B3__PUSH_PULL;
  48   1        P0MDOUT |=P0MDOUT_B4__PUSH_PULL;
  49   1      }
  50          void timer_enable(){
  51   1        CKCON0= CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE; // 24.5Mhz divide by 4=6.125Mhz
C51 COMPILER V9.60.0.0   INTERRUPT_ET_MAIN                                                 06/03/2021 10:56:05 PAGE 2   

  52   1        TMOD =TMOD_T0M__MODE1;
  53   1        // 10ms->100Hz ->TH0:TL0=65536-6.125MHz/100=4286->10BE
  54   1        TH0=0X10;
  55   1        TL0=0XBE;
  56   1      
  57   1        IE_EA=1;
  58   1        IE_ET0=1;
  59   1      
  60   1        TCON_TR0=1;
  61   1      }
  62          void pwm_init(){
  63   1        PCA0CPM0 |=PCA0CPM0_PWM__ENABLED;
  64   1      
  65   1        PCA0CPH0=0;
  66   1      
  67   1        PCA0CN0 |=PCA0CN0_CR__RUN;
  68   1      }
  69          
  70          SI_INTERRUPT(TIMER0_ISR, TIMER0_IRQn){
  71   1        msTick+=10;
  72   1        TH0=0X10;
  73   1        TL0=0XBE;
  74   1      
  75   1        TCON_TF0=0;
  76   1      }
  77          uint32_t t0_last,t1_last;
  78          
  79          uint16_t dt0=10;
  80          uint16_t dt1=100;
  81          
  82          uint8_t pwm_val=0;
  83          
  84          int8_t pwm_dir=10;
  85          int value=10;
  86          char msg[64];
  87          int
  88          main (void)
  89          {
  90   1        // Call hardware initialization routine
  91   1        enter_DefaultMode_from_RESET ();
  92   1        crossbar_enable();
  93   1        timer_enable();
  94   1        pwm_init();
  95   1        Uart_timer();
  96   1        while (1)
  97   1          {
  98   2            if(msTick-t0_last>=dt0){
  99   3                t0_last=msTick;
 100   3                if(pwm_val==0){
 101   4                    pwm_dir=10;
 102   4                }else if(pwm_val==255){
 103   4                    pwm_dir=-10;
 104   4                }
 105   3                pwm_val +=pwm_dir;
 106   3      
 107   3                PCA0CPH0=pwm_val;
 108   3            }
 109   2            if( msTick-t1_last>=dt1){
 110   3                t1_last=msTick;
 111   3                sprintf(msg,"value=%d \n",value);
 112   3                put_string(msg);
 113   3            }
 114   2      // $[Generated Run-time code]
C51 COMPILER V9.60.0.0   INTERRUPT_ET_MAIN                                                 06/03/2021 10:56:05 PAGE 3   

 115   2      // [Generated Run-time code]$
 116   2          }
 117   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    307    ----
   CONSTANT SIZE    =     11    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     84    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
