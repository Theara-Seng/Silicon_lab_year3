C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/20/2021 21:57:26 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE INITDEVICE
OBJECT MODULE PLACED IN .\src/InitDevice.OBJ
COMPILER INVOKED BY: Z:\home\tadashi\Downloads\SimplicityStudio_v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe /home
                    -/tadashi/SimplicityStudio/v5_workspace/SMBUS/src/InitDevice.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) F
                    -LOATFUZZY(3) OPTIMIZE(0,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(/home/tadashi/SimplicityStudio/v5_wor
                    -kspace/SMBUS/inc;/home/tadashi/Downloads/SimplicityStudio_v5/developer/sdks/8051/v4.2.0//Device/shared/si8051Base;/home/
                    -tadashi/Downloads/SimplicityStudio_v5/developer/sdks/8051/v4.2.0//Device/EFM8LB1/inc) PRINT(.\src/InitDevice.lst) COND P
                    -AGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/InitDevice.OBJ)

line level    source

   1          //=========================================================
   2          // src/InitDevice.c: generated by Hardware Configurator
   3          //
   4          // This file will be regenerated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          // USER INCLUDES
  10          #include <SI_EFM8LB1_Register_Enums.h>
  11          #include "InitDevice.h"
  12          
  13          // USER PROTOTYPES
  14          // USER FUNCTIONS
  15          
  16          // $[Library Includes]
  17          // [Library Includes]$
  18          
  19          //==============================================================================
  20          // enter_DefaultMode_from_RESET
  21          //==============================================================================
  22          extern void
  23          enter_DefaultMode_from_RESET (void)
  24          {
  25   1        // $[Config Calls]
  26   1        // Save the SFRPAGE
  27   1        uint8_t SFRPAGE_save = SFRPAGE;
  28   1        WDT_0_enter_DefaultMode_from_RESET ();
  29   1        PBCFG_0_enter_DefaultMode_from_RESET ();
  30   1        CLOCK_0_enter_DefaultMode_from_RESET ();
  31   1        SMBUS_0_enter_DefaultMode_from_RESET ();
  32   1        // Restore the SFRPAGE
  33   1        SFRPAGE = SFRPAGE_save;
  34   1        // [Config Calls]$
  35   1      
  36   1      }
  37          
  38          extern void
  39          WDT_0_enter_DefaultMode_from_RESET (void)
  40          {
  41   1        // $[Watchdog Timer Init Variable Declarations]
  42   1        uint32_t i;
  43   1        bool ea;
  44   1        // [Watchdog Timer Init Variable Declarations]$
  45   1      
  46   1        // $[WDTCN - Watchdog Timer Control]
  47   1        // Deprecated
  48   1        // [WDTCN - Watchdog Timer Control]$
  49   1      
  50   1        // $[WDTCN_2 - Watchdog Timer Control]
  51   1        SFRPAGE = 0x00;
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/20/2021 21:57:26 PAGE 2   

  52   1      
  53   1        // Feed WDT timer before disabling (Erratum WDT_E102)
  54   1        WDTCN = 0xA5;
  55   1      
  56   1        // Add 2 LFO cycle delay before disabling WDT (Erratum WDT_E102)
  57   1        for (i = 0; i < (2 * 3062500UL) / (80000 * 3); i++)
  58   1          {
  59   2            NOP ();
  60   2          }
  61   1      
  62   1        // Disable WDT
  63   1        ea = IE_EA;
  64   1        IE_EA = 0;
  65   1        WDTCN = 0xDE;
  66   1        WDTCN = 0xAD;
  67   1        IE_EA = ea;
  68   1      
  69   1        // [WDTCN_2 - Watchdog Timer Control]$
  70   1      
  71   1      }
  72          
  73          extern void
  74          PBCFG_0_enter_DefaultMode_from_RESET (void)
  75          {
  76   1        // $[XBR2 - Port I/O Crossbar 2]
  77   1        /***********************************************************************
  78   1         - Weak Pullups enabled 
  79   1         - Crossbar enabled
  80   1         - UART1 I/O unavailable at Port pin
  81   1         - UART1 RTS1 unavailable at Port pin
  82   1         - UART1 CTS1 unavailable at Port pin
  83   1         ***********************************************************************/
  84   1        XBR2 = XBR2_WEAKPUD__PULL_UPS_ENABLED | XBR2_XBARE__ENABLED
  85   1            | XBR2_URT1E__DISABLED | XBR2_URT1RTSE__DISABLED
  86   1            | XBR2_URT1CTSE__DISABLED;
  87   1        // [XBR2 - Port I/O Crossbar 2]$
  88   1      
  89   1        // $[PRTDRV - Port Drive Strength]
  90   1        // [PRTDRV - Port Drive Strength]$
  91   1      
  92   1        // $[XBR0 - Port I/O Crossbar 0]
  93   1        /***********************************************************************
  94   1         - UART0 I/O unavailable at Port pin
  95   1         - SPI I/O unavailable at Port pins
  96   1         - SMBus 0 I/O routed to Port pins
  97   1         - CP0 unavailable at Port pin
  98   1         - Asynchronous CP0 unavailable at Port pin
  99   1         - CP1 unavailable at Port pin
 100   1         - Asynchronous CP1 unavailable at Port pin
 101   1         - SYSCLK unavailable at Port pin
 102   1         ***********************************************************************/
 103   1        XBR0 = XBR0_URT0E__DISABLED | XBR0_SPI0E__DISABLED | XBR0_SMB0E__ENABLED
 104   1            | XBR0_CP0E__DISABLED | XBR0_CP0AE__DISABLED | XBR0_CP1E__DISABLED
 105   1            | XBR0_CP1AE__DISABLED | XBR0_SYSCKE__DISABLED;
 106   1        // [XBR0 - Port I/O Crossbar 0]$
 107   1      
 108   1        // $[XBR1 - Port I/O Crossbar 1]
 109   1        // [XBR1 - Port I/O Crossbar 1]$
 110   1      
 111   1      }
 112          
 113          extern void
 114          CLOCK_0_enter_DefaultMode_from_RESET (void)
C51 COMPILER V9.60.0.0   INITDEVICE                                                        04/20/2021 21:57:26 PAGE 3   

 115          {
 116   1        // $[HFOSC1 Setup]
 117   1        // [HFOSC1 Setup]$
 118   1      
 119   1        // $[CLKSEL - Clock Select]
 120   1        /***********************************************************************
 121   1         - Clock derived from the Internal High Frequency Oscillator 0
 122   1         - SYSCLK is equal to selected clock source divided by 128
 123   1         ***********************************************************************/
 124   1        CLKSEL = CLKSEL_CLKSL__HFOSC0 | CLKSEL_CLKDIV__SYSCLK_DIV_128;
 125   1        while ((CLKSEL & CLKSEL_DIVRDY__BMASK) == CLKSEL_DIVRDY__NOT_READY)
 126   1          ;
 127   1        // [CLKSEL - Clock Select]$
 128   1      
 129   1      }
 130          
 131          extern void
 132          SMBUS_0_enter_DefaultMode_from_RESET (void)
 133          {
 134   1        // $[SMB0FCN0 - SMBus0 FIFO Control 0]
 135   1        // [SMB0FCN0 - SMBus0 FIFO Control 0]$
 136   1      
 137   1        // $[SMB0RXLN - SMBus0 Receive Length Counter]
 138   1        // [SMB0RXLN - SMBus0 Receive Length Counter]$
 139   1      
 140   1        // $[SMB0ADR - SMBus 0 Slave Address]
 141   1        // [SMB0ADR - SMBus 0 Slave Address]$
 142   1      
 143   1        // $[SMB0ADM - SMBus 0 Slave Address Mask]
 144   1        // [SMB0ADM - SMBus 0 Slave Address Mask]$
 145   1      
 146   1        // $[SMB0TC - SMBus 0 Timing and Pin Control]
 147   1        // [SMB0TC - SMBus 0 Timing and Pin Control]$
 148   1      
 149   1        // $[SMB0CF - SMBus 0 Configuration]
 150   1        /***********************************************************************
 151   1         - Enable the SMBus module
 152   1         ***********************************************************************/
 153   1        SMB0CF |= SMB0CF_ENSMB__ENABLED;
 154   1        // [SMB0CF - SMBus 0 Configuration]$
 155   1      
 156   1      }
 157          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    137    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      5    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
