//=========================================================
// src/Timer_main.c: generated by Hardware Configurator
//
// This file will be updated when saving a document.
// leave the sections inside the "$[...]" comment tags alone
// or they will be overwritten!!
//=========================================================

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <SI_EFM8LB1_Register_Enums.h>                  // SFR declarations
#include "InitDevice.h"
// $[Generated Includes]
// [Generated Includes]$
sbit led=P1^3;
uint8_t i=0;
//-----------------------------------------------------------------------------
// SiLabs_Startup() Routine
// ----------------------------------------------------------------------------
// This function is called immediately after reset, before the initialization
// code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
// useful place to disable the watchdog timer, which is enable by default
// and may trigger before main() in some instances.
//-----------------------------------------------------------------------------

void
SiLabs_Startup (void)
{
  // $[SiLabs Startup]
  // [SiLabs Startup]$
  WDTCN = 0xDE;
  WDTCN = 0xAD;
}
SI_INTERRUPT(TIMER0_ISR,TIMER0_IRQn){
  TH0=0X06;
  TL0=0XC5;
  led=~led;
  TCON_TF0=0;
}
void system_clock(){
  CLKSEL=CLKSEL_CLKDIV__SYSCLK_DIV_8 | CLKSEL_CLKSL__HFOSC0;

}
void cross_bar_enable(){
  XBR2 |= XBR2_XBARE__ENABLED;

}
void timer_delay(){
  CKCON0 =CKCON0_SCA__SYSCLK_DIV_48 | CKCON0_T0M__PRESCALE ;
  TMOD = TMOD_T0M__MODE1;
  TH0=0X06;
  TL0=0XC5;
  IE_ET0 = 1;
  TCON_TR0 = 1;
}
//-----------------------------------------------------------------------------
// main() Routine
// ----------------------------------------------------------------------------
int
main (void)
{
  // Call hardware initialization routine
 // enter_DefaultMode_from_RESET ();
  system_clock();
  cross_bar_enable();
  timer_delay();
  IE_EA = 1;
  P1MDOUT |=P1MDOUT_B3__PUSH_PULL;

  while (1)
    {

// $[Generated Run-time code]
// [Generated Run-time code]$
    }
}
