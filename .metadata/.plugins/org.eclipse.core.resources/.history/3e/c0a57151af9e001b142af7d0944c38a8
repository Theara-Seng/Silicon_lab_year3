//=========================================================
// src/DHT11_temperature_sensor_main.c: generated by Hardware Configurator
//
// This file will be updated when saving a document.
// leave the sections inside the "$[...]" comment tags alone
// or they will be overwritten!!
//=========================================================

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <SI_EFM8LB1_Register_Enums.h>                  // SFR declarations
#include "InitDevice.h"
#include "STDIO.H"
// $[Generated Includes]
// [Generated Includes]$
//  char data[32]={0};
  int  x=100;
  char  msg[32];
  sbit DHT11=P2^1;    /* Connect DHT11 output Pin to P2.1 Pin */
  int I_RH,D_RH,I_Temp,D_Temp,CheckSum;
//-----------------------------------------------------------------------------
// SiLabs_Startup() Routine
// ----------------------------------------------------------------------------
// This function is called immediately after reset, before the initialization
// code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
// useful place to disable the watchdog timer, which is enable by default
// and may trigger before main() in some instances.
//-----------------------------------------------------------------------------
void
SiLabs_Startup (void)
{
  // $[SiLabs Startup]
  // [SiLabs Startup]$
}
void system_clock(){
  CLKSEL=CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__HFOSC0;

}
void cross_bar_enable(){
 XBR2 |= XBR2_XBARE__ENABLED;
//  XBR2_XBARE=1;
  XBR0 |= XBR0_URT0E__ENABLED;

}
void Uart_timer(){
  CKCON0 = CKCON0_T1M__SYSCLK;
  TMOD =TMOD_T1M__MODE2;
  TL1=0X96;
  TH1=0X96;
  TCON_TR1=1;

}
void timer_delay_20ms(){
  CKCON0 =CKCON0_T0M__PRESCALE | CKCON0_SCA__SYSCLK_DIV_48;
  TMOD |= TMOD_T0M__MODE1;
  TH0=0X03;
  TL0=0XFC;
  TCON_TR0=1;
  while(TCON_TF0==0);
  TCON_TF0=0;
  TCON_TR0=0;

}
void timer_delay_30us(){
 // TMOD |= TMOD_T0M__MODE1;
  TH0=0X00;
  TL0=0X0F;
  TCON_TR0=1;
  while(TCON_TF0==0);
  TCON_TF0=0;
  TCON_TR0=0;
}
void request(){
  DHT11=0;
  timer_delay_20ms();
  DHT11=1;
  timer_delay_30us();
}
void response(){

}
void put_char(char c)
{
  SBUF0 = c; // write character to buffer
  while (!SCON0_TI); // wait for Tx to be complete
  SCON0_TI = 0; // clear Tx flag
}
void put_string(char* str)
{
  // send character until null-termination is found
  while (*str != '\x0')
  {
    put_char(*(str++));
  }
}

//-----------------------------------------------------------------------------
// main() Routine
// ----------------------------------------------------------------------------
int
main (void)
{

  // Call hardware initialization routine
 // enter_DefaultMode_from_RESET ();
  system_clock();
  cross_bar_enable();
  Uart_timer();
  P0MDOUT |= P0MDOUT_B4__PUSH_PULL;
  P2MDOUT |= P2MDOUT_B1__PUSH_PULL;

  while (1)
    {
      request();
     // sprintf(msg,"the data is:%u \n",x);
     // put_string(msg);
// $[Generated Run-time code]
// [Generated Run-time code]$
    }
}
