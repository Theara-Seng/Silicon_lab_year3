//=========================================================
// src/Ultrasonic_sensor_main.c: generated by Hardware Configurator
//
// This file will be updated when saving a document.
// leave the sections inside the "$[...]" comment tags alone
// or they will be overwritten!!
//=========================================================

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <SI_EFM8LB1_Register_Enums.h>                  // SFR declarations
#include "InitDevice.h"
#include "serial.h"
#include "delay.h"
#include "pin.h"
#include "HC-SR04.h"
#include "stdint.h"
#include "STDIO.H"
// $[Generated Includes]
// [Generated Includes]$
sbit led = P1 ^ 3;
uint16_t distance;
char msg[64];
//-----------------------------------------------------------------------------
// SiLabs_Startup() Routine
// ----------------------------------------------------------------------------
// This function is called immediately after reset, before the initialization
// code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
// useful place to disable the watchdog timer, which is enable by default
// and may trigger before main() in some instances.
//-----------------------------------------------------------------------------
void
SiLabs_Startup (void)
{
  // $[SiLabs Startup]
  // [SiLabs Startup]$
  WDTCN = 0xDE;
  WDTCN = 0xAD;
}

//-----------------------------------------------------------------------------
// main() Routine
// ----------------------------------------------------------------------------
int
main (void)
{
  // Call hardware initialization routine
  //enter_DefaultMode_from_RESET ();
  CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__HFOSC0;

  XBR2 |= XBR2_XBARE__ENABLED;

  Uart_timer ();
  P1MDOUT = P1MDOUT_B3__PUSH_PULL;
  P0MDOUT = P0MDOUT_B4__PUSH_PULL;
  P0MDOUT = P0MDOUT_B0__PUSH_PULL;
  P0MDOUT = P0MDOUT_B1__PUSH_PULL;
  while (1)
    {
      //   HC_SR04_TRIGGER=1;
      //  delay_ms(100);
      //   HC_SR04_TRIGGER=0;
      // put_string ("hello world\n");
      //  delay_ms (100);
      distance = 10;
      put_string("hello world\n");
      delay_ms(100);
      sprintf(msg,"distance=%d\n",distance); //
      put_string(msg);
      delay_ms(100);
//      if (hc_sr04_get_distance (&distance) == HC_SR04_SUCCESS)
//        {
//          sprintf (msg, "the distance is %d\n", distance);
//          put_string (msg);
//        }
//      else
//        {
//          put_string ("out of range");
//        }
      //  delay_ms (1000);
      //  led = 0;
      // delay_ms (8000);
      //  led = 1;
      //  delay_ms (8000);

// $[Generated Run-time code]
// [Generated Run-time code]$
      //    delay_ms (400);
    }
}
