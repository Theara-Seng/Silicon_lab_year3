//=========================================================
// src/myProject_2_main.c: generated by Hardware Configurator
//
// This file will be updated when saving a document.
// leave the sections inside the "$[...]" comment tags alone
// or they will be overwritten!!
//=========================================================

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <SI_EFM8LB1_Register_Enums.h>                  // SFR declarations
#include "InitDevice.h"
// $[Generated Includes]
// [Generated Includes]$

//-----------------------------------------------------------------------------
// SiLabs_Startup() Routine
// ----------------------------------------------------------------------------
// This function is called immediately after reset, before the initialization
// code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
// useful place to disable the watchdog timer, which is enable by default
// and may trigger before main() in some instances.
//-----------------------------------------------------------------------------
void
SiLabs_Startup (void)
{
  // $[SiLabs Startup]
  // [SiLabs Startup]$
  WDTCN = 0XDE;
  WDTCN = 0XAD;
}

void cross_bar_init(){
  XBR2 |=XBR2_XBARE__ENABLED;
  XBR1 |=XBR1_PCA0ME__CEX0;
  XBR1 |=XBR1_PCA0ME__CEX0_TO_CEX1;
  P1MDOUT |=P1MDOUT_B3__PUSH_PULL;
}
void pwm_init(){
 // PCA0CPM0 |=PCA0CPM0_PWM__ENABLED;
 //  PCA0CPM1 |=PCA0CPM1_PWM__ENABLED;
   // write pwm to autoreload register
  PCA0CPM0  |=PCA0CPM0_PWM16__16_BIT;

   PCA0CPH0 = 100;
//   PCA0CPH1 =100;
 //  PCA0CPL1 = 0;
 //  PCA0CPH1 =0XFF&10>>8;
  // PCA0CPH1= 0;
   // start PCA
   PCA0CN0 = PCA0CN0_CR__RUN;
}

uint8_t pwm_val = 0;
uint16_t pwm_val1=0;
//-----------------------------------------------------------------------------
// main() Routine
// ----------------------------------------------------------------------------
int
main (void)
{
  // Call hardware initialization routine
 // enter_DefaultMode_from_RESET ();
  CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_32 | CLKSEL_CLKSL__HFOSC0;
  cross_bar_init();
  pwm_init();
   PCA0MD |=PCA0MD_CPS__SYSCLK_DIV_12;
  P0MDOUT |=P0MDOUT_B0__PUSH_PULL;
  P0MDOUT |=P0MDOUT_B1__PUSH_PULL;
  while (1)
    {
// $[Generated Run-time code]
// [Generated Run-time code]$
     // pwm_val=100;
     // pwm_val1=100;
    //  PCA0CPH0=pwm_val;
    //  PCA0CPH1=pwm_val1;

    }
}
