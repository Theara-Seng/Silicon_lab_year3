//=========================================================
// src/IE2_main.c: generated by Hardware Configurator
//
// This file will be updated when saving a document.
// leave the sections inside the "$[...]" comment tags alone
// or they will be overwritten!!
//=========================================================

//-----------------------------------------------------------------------------
// Includes
//-----------------------------------------------------------------------------
#include <SI_EFM8LB1_Register_Enums.h>                  // SFR declarations
#include "InitDevice.h"
// $[Generated Includes]
// [Generated Includes]$
uint32_t volatile msTicks=0;
//-----------------------------------------------------------------------------
// SiLabs_Startup() Routine
// ----------------------------------------------------------------------------
// This function is called immediately after reset, before the initialization
// code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
// useful place to disable the watchdog timer, which is enable by default
// and may trigger before main() in some instances.
//-----------------------------------------------------------------------------
void
SiLabs_Startup (void)
{
  // $[SiLabs Startup]
  // [SiLabs Startup]$
  WDTCN = 0xDE;
  WDTCN = 0xAD;
}
SI_INTERRUPT(TIMER0_ISR, TIMER0_IRQn)
{
  msTicks += 10; // increase every 10 ms
  // reload timer value
  TH0 = 0x10;
  TL0 = 0xBE;
  // clear interrupt flag
  TCON_TF0 = 0;
}
void crossbar_init(){
  CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__HFOSC0;
  XBR2 |= XBR2_XBARE__ENABLED;
  XBR0 |= XBR0_URT0E__ENABLED;
  XBR1 |= XBR1_PCA0ME__CEX0;
  P0SKIP = 0xCF; // 0b1100 1111
  P1SKIP = 0x07; // 0b0000 0111
  P0MDOUT |= P0MDOUT_B4__PUSH_PULL;
  P1MDOUT |= P1MDOUT_B3__PUSH_PULL;
}
void timer_init(){
  CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE;
  TMOD = TMOD_T0M__MODE1;
  TH0 = 0x10;
  TL0 = 0xBE;

  IE_EA=1;
  IE_ET0 = 1;
  TCON_TR0 = 1;
}
void PWM_Init()
{
  /* setup 8-bit PWM on CEX0 */
  PCA0CPM0 |= PCA0CPM0_PWM__ENABLED;
  // write pwm to autoreload register
  PCA0CPH0 = 0;
  // start PCA
  PCA0CN0 |= PCA0CN0_CR__RUN;
}
//-----------------------------------------------------------------------------
// main() Routine
// ----------------------------------------------------------------------------
uint32_t t0_last;

const uint16_t dt0 = 1000;

uint8_t pwm_val = 0;
int8_t pwm_dir = 10;
int
main (void)
{
  // Call hardware initialization routine
  enter_DefaultMode_from_RESET ();
  crossbar_init();
  timer_init();
  PWM_Init();

  t0_last = msTicks;
  while (1)
    {
      if (msTicks - t0_last >= dt0)
        {
          t0_last = msTicks;
          /* breathing LED */
          if (pwm_val == 0) pwm_dir = 10;
          else if (pwm_val == 250) pwm_dir = -10;
          pwm_val += pwm_dir;
          PCA0CPH0 = pwm_val;
        }
// $[Generated Run-time code]
// [Generated Run-time code]$
    }
}
