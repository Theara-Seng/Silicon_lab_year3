C51 COMPILER V9.60.0.0   IE2_MAIN                                                          06/02/2021 10:40:55 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE IE2_MAIN
OBJECT MODULE PLACED IN .\src\IE2_main.OBJ
COMPILER INVOKED BY: c:\SiliconLabs\SimplicityStudio\v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe D:\year4-semeste
                    -r2\Silicon_lab_year3\IE2\src\IE2_main.c OMF2 SMALL DEBUG OBJECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(
                    -0,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR(D:\year4-semester2\Silicon_lab_year3\IE2\inc;C:/SiliconLabs
                    -/SimplicityStudio/v5/developer/sdks/8051/v4.2.0//Device/shared/si8051Base;C:/SiliconLabs/SimplicityStudio/v5/developer/s
                    -dks/8051/v4.2.0//Device/EFM8LB1/inc) PRINT(.\src\IE2_main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src\IE2_main.
                    -OBJ)

line level    source

   1          //=========================================================
   2          // src/IE2_main.c: generated by Hardware Configurator
   3          //
   4          // This file will be updated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          //-----------------------------------------------------------------------------
  10          // Includes
  11          //-----------------------------------------------------------------------------
  12          #include <SI_EFM8LB1_Register_Enums.h>                  // SFR declarations
  13          #include "InitDevice.h"
  14          #include <STDIO.H>
  15          #include "serial.h"
  16          // $[Generated Includes]
  17          // [Generated Includes]$
  18          uint32_t volatile msTicks=0;
  19          //-----------------------------------------------------------------------------
  20          // SiLabs_Startup() Routine
  21          // ----------------------------------------------------------------------------
  22          // This function is called immediately after reset, before the initialization
  23          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  24          // useful place to disable the watchdog timer, which is enable by default
  25          // and may trigger before main() in some instances.
  26          //-----------------------------------------------------------------------------
  27          void
  28          SiLabs_Startup (void)
  29          {
  30   1        // $[SiLabs Startup]
  31   1        // [SiLabs Startup]$
  32   1        WDTCN = 0xDE;
  33   1        WDTCN = 0xAD;
  34   1      }
  35          SI_INTERRUPT(TIMER0_ISR, TIMER0_IRQn)
  36          {
  37   1        msTicks += 10; // increase every 10 ms
  38   1        // reload timer value
  39   1        TH0 = 0x10;
  40   1        TL0 = 0xBE;
  41   1        // clear interrupt flag
  42   1        TCON_TF0 = 0;
  43   1      }
  44          void crossbar_init(){
  45   1        CLKSEL = CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__HFOSC0;
  46   1        XBR2 |= XBR2_XBARE__ENABLED;
  47   1        XBR0 |= XBR0_URT0E__ENABLED;
  48   1        XBR1 |= XBR1_PCA0ME__CEX0;
  49   1        P0SKIP = 0xCF; // 0b1100 1111
  50   1        P1SKIP = 0x07; // 0b0000 0111
  51   1        P0MDOUT |= P0MDOUT_B4__PUSH_PULL;
C51 COMPILER V9.60.0.0   IE2_MAIN                                                          06/02/2021 10:40:55 PAGE 2   

  52   1        P1MDOUT |= P1MDOUT_B3__PUSH_PULL;
  53   1      }
  54          void timer_init(){
  55   1        CKCON0 = CKCON0_SCA__SYSCLK_DIV_4 | CKCON0_T0M__PRESCALE;
  56   1      
  57   1        TMOD = TMOD_T0M__MODE1;
  58   1        TH0 = 0x10;
  59   1        TL0 = 0xBE;
  60   1      
  61   1        IE_EA=1;
  62   1        IE_ET0 = 1;
  63   1        TCON_TR0 = 1;
  64   1      }
  65          void PWM_Init()
  66          {
  67   1        /* setup 8-bit PWM on CEX0 */
  68   1        PCA0CPM0 |= PCA0CPM0_PWM__ENABLED;
  69   1        // write pwm to autoreload register
  70   1        PCA0CPH0 = 0;
  71   1        // start PCA
  72   1        PCA0CN0 |= PCA0CN0_CR__RUN;
  73   1      }
  74          //-----------------------------------------------------------------------------
  75          // main() Routine
  76          // ----------------------------------------------------------------------------
  77          uint32_t t0_last,t1_last;
  78          
  79          const uint16_t dt0 = 10;
  80          const uint16_t dt1 =100;
  81          uint8_t pwm_val = 0;
  82          int8_t pwm_dir = 10;
  83          int value =100;
  84          char msg[64];
  85          int
  86          main (void)
  87          {
  88   1        // Call hardware initialization routine
  89   1        enter_DefaultMode_from_RESET ();
  90   1        crossbar_init();
  91   1        timer_init();
  92   1        PWM_Init();
  93   1        Uart_timer();
  94   1        t0_last = msTicks;
  95   1      
  96   1        while (1)
  97   1          {
  98   2            if (msTicks - t0_last >= dt0)
  99   2              {
 100   3                t0_last = msTicks;
 101   3                /* breathing LED */
 102   3                if (pwm_val == 0) pwm_dir = 10;
 103   3                else if (pwm_val == 250) pwm_dir = -10;
 104   3                pwm_val += pwm_dir;
 105   3                PCA0CPH0 = pwm_val;
 106   3              }
 107   2            if (msTicks-t1_last>=dt1){
 108   3                t1_last=msTicks;
 109   3                sprintf(msg, "value: %d \n", value);
 110   3                put_string(msg);
 111   3            }
 112   2      // $[Generated Run-time code]
 113   2      // [Generated Run-time code]$
 114   2          }
C51 COMPILER V9.60.0.0   IE2_MAIN                                                          06/02/2021 10:40:55 PAGE 3   

 115   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    323    ----
   CONSTANT SIZE    =     12    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     84    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
