C51 COMPILER V9.60.0.0   DHT11_TEMPERATURE_SENSOR_MAIN                                     04/16/2021 20:40:32 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE DHT11_TEMPERATURE_SENSOR_MAIN
OBJECT MODULE PLACED IN .\src/DHT11_temperature_sensor_main.OBJ
COMPILER INVOKED BY: Z:\home\tadashi\Downloads\SimplicityStudio_v5\developer\toolchains\keil_8051\9.60\BIN\C51.exe /home
                    -/tadashi/SimplicityStudio/v5_workspace/DHT11_temperature_sensor/src/DHT11_temperature_sensor_main.c OMF2 SMALL DEBUG OBJ
                    -ECTEXTEND ROM(LARGE) WARNINGLEVEL(2) FLOATFUZZY(3) OPTIMIZE(0,SPEED) DEFINE(DEBUG=1) INTVECTOR(0X0000) INTPROMOTE INCDIR
                    -(/home/tadashi/SimplicityStudio/v5_workspace/DHT11_temperature_sensor/inc;/home/tadashi/Downloads/SimplicityStudio_v5/de
                    -veloper/sdks/8051/v4.2.0//Device/shared/si8051Base;/home/tadashi/Downloads/SimplicityStudio_v5/developer/sdks/8051/v4.2.
                    -0//Device/EFM8LB1/inc) PRINT(.\src/DHT11_temperature_sensor_main.lst) COND PAGEWIDTH(120) PAGELENGTH(65) OBJECT(.\src/DH
                    -T11_temperature_sensor_main.OBJ)

line level    source

   1          //=========================================================
   2          // src/DHT11_temperature_sensor_main.c: generated by Hardware Configurator
   3          //
   4          // This file will be updated when saving a document.
   5          // leave the sections inside the "$[...]" comment tags alone
   6          // or they will be overwritten!!
   7          //=========================================================
   8          
   9          //-----------------------------------------------------------------------------
  10          // Includes
  11          //-----------------------------------------------------------------------------
  12          #include <SI_EFM8LB1_Register_Enums.h>                  // SFR declarations
  13          #include "InitDevice.h"
  14          #include "STDIO.H"
  15          // $[Generated Includes]
  16          // [Generated Includes]$
  17          //  char data[32]={0};
  18            int  x=100;
  19            char  msg[64];
  20            sbit DHT11=P2^1;    /* Connect DHT11 output Pin to P2.1 Pin */
  21            int I_RH,D_RH,I_Temp,D_Temp,CheckSum;
  22          //-----------------------------------------------------------------------------
  23          // SiLabs_Startup() Routine
  24          // ----------------------------------------------------------------------------
  25          // This function is called immediately after reset, before the initialization
  26          // code is run in SILABS_STARTUP.A51 (which runs before main() ). This is a
  27          // useful place to disable the watchdog timer, which is enable by default
  28          // and may trigger before main() in some instances.
  29          //-----------------------------------------------------------------------------
  30          void
  31          SiLabs_Startup (void)
  32          {
  33   1        // $[SiLabs Startup]
  34   1        // [SiLabs Startup]$
  35   1      }
  36          void system_clock(){
  37   1        CLKSEL=CLKSEL_CLKDIV__SYSCLK_DIV_1 | CLKSEL_CLKSL__HFOSC0;
  38   1      
  39   1      }
  40          void cross_bar_enable(){
  41   1       XBR2 |= XBR2_XBARE__ENABLED;
  42   1      //  XBR2_XBARE=1;
  43   1        XBR0 |= XBR0_URT0E__ENABLED;
  44   1      
  45   1      }
  46          void Uart_timer(){
  47   1        CKCON0 = CKCON0_T1M__SYSCLK;
  48   1        TMOD =TMOD_T1M__MODE2;
  49   1        TL1=0X96;
  50   1        TH1=0X96;
C51 COMPILER V9.60.0.0   DHT11_TEMPERATURE_SENSOR_MAIN                                     04/16/2021 20:40:32 PAGE 2   

  51   1        TCON_TR1=1;
  52   1      
  53   1      }
  54          void timer_delay_20ms(){
  55   1        CKCON0 =CKCON0_T0M__PRESCALE | CKCON0_SCA__SYSCLK_DIV_48;
  56   1        TMOD |= TMOD_T0M__MODE1;
  57   1        TH0=0XD8;
  58   1        TL0=0X1F;
  59   1        TCON_TR0=1;
  60   1        while(TCON_TF0==0);
  61   1        TCON_TF0=0;
  62   1        TCON_TR0=0;
  63   1      
  64   1      }
  65          void timer_delay_30us(){
  66   1        TMOD |= TMOD_T0M__MODE1;
  67   1        TH0=0XFF;
  68   1        TL0=0XFA;
  69   1        TCON_TR0=1;
  70   1        while(TCON_TF0==0);
  71   1        TCON_TF0=0;
  72   1        TCON_TR0=0;
  73   1      }
  74          void request(){
  75   1        DHT11=0;
  76   1        timer_delay_20ms();
  77   1        DHT11=1;
  78   1        //timer_delay_30us();
  79   1      }
  80          void response(){
  81   1       while (DHT11==1);
  82   1       while (DHT11==0);
  83   1       while (DHT11==1);
  84   1      }
  85          int Receive_data()    /* Receive data */
  86          {
  87   1        int q,c=0;
  88   1        for (q=0; q<8; q++)
  89   1        {
  90   2          while(DHT11==0);/* check received bit 0 or 1 */
  91   2          timer_delay_30us();
  92   2          if(DHT11 == 1)  /* If high pulse is greater than 30ms */
  93   2          c = (c<<1)|(0x01);/* Then its logic HIGH */
  94   2          else    /* otherwise its logic LOW */
  95   2          c = (c<<1);
  96   2          while(DHT11==1);
  97   2        }
  98   1        return c;
  99   1      }
 100          void put_char(char c)
 101          {
 102   1        SBUF0 = c; // write character to buffer
 103   1        while (!SCON0_TI); // wait for Tx to be complete
 104   1        SCON0_TI = 0; // clear Tx flag
 105   1      }
 106          void put_string(char* str)
 107          {
 108   1        // send character until null-termination is found
 109   1        while (*str != '\x0')
 110   1        {
 111   2          put_char(*(str++));
 112   2        }
 113   1      }
C51 COMPILER V9.60.0.0   DHT11_TEMPERATURE_SENSOR_MAIN                                     04/16/2021 20:40:32 PAGE 3   

 114          
 115          //-----------------------------------------------------------------------------
 116          // main() Routine
 117          // ----------------------------------------------------------------------------
 118          int
 119          main (void)
 120          {
 121   1      
 122   1        // Call hardware initialization routine
 123   1       // enter_DefaultMode_from_RESET ();
 124   1        system_clock();
 125   1        cross_bar_enable();
 126   1        Uart_timer();
 127   1        P0MDOUT |= P0MDOUT_B4__PUSH_PULL;
 128   1        P2MDOUT |= P2MDOUT_B1__PUSH_PULL;
 129   1        put_string("let's get started\n");
 130   1        sprintf(msg,"Hum = %d\n",x);
 131   1            //       sprintf(m,"Tem = %d.%d",I_Temp,D_Temp);
 132   1             put_string(msg);
 133   1        while (1)
 134   1          {
 135   2            request();
 136   2            response();
 137   2            I_RH=Receive_data();  /* store first eight bit in I_RH */
 138   2            D_RH=Receive_data();  /* store next eight bit in D_RH */
 139   2            I_Temp=Receive_data();  /* store next eight bit in I_Temp */
 140   2            D_Temp=Receive_data();  /* store next eight bit in D_Temp */
 141   2            CheckSum=Receive_data();/* store next eight bit in CheckSum */
 142   2      
 143   2      
 144   2      
 145   2      
 146   2      
 147   2            //      memset(dat,0,20);
 148   2            //      sprintf(dat,"%d   ",CheckSum);
 149   2      
 150   2      
 151   2            timer_delay_20ms();
 152   2           // sprintf(msg,"the data is:%u \n",x);
 153   2           // put_string(msg);
 154   2      // $[Generated Run-time code]
 155   2      // [Generated Run-time code]$
 156   2          }
 157   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    340    ----
   CONSTANT SIZE    =     29    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     84    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
